server.port=8080
spring.application.name=chart

# Database Configuration - Use environment variables for security
spring.datasource.url=jdbc:postgresql://localhost:5432/chart
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# JPA & Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=${SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# OpenAPI Documentation
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true

# OAuth2 Client Configuration - Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email

# OAuth2 Client Configuration - Facebook
spring.security.oauth2.client.registration.facebook.client-id=${FACEBOOK_CLIENT_ID}
spring.security.oauth2.client.registration.facebook.client-secret=${FACEBOOK_CLIENT_SECRET}
spring.security.oauth2.client.registration.facebook.scope=public_profile,email

# JWT Configuration
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION}

# Mail Configuration
spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Kafka Configuration
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.add.type.headers=true
spring.kafka.producer.properties.spring.json.trusted.packages=com.example.chart.email.model
spring.kafka.producer.retries=3
spring.kafka.producer.properties.retry.backoff.ms=1000
spring.kafka.producer.properties.request.timeout.ms=5000
spring.kafka.producer.properties.max.block.ms=5000

# RabbitMQ Configuration
spring.rabbitmq.host=${RABBITMQ_HOST}
spring.rabbitmq.port=${RABBITMQ_PORT}
spring.rabbitmq.username=${RABBITMQ_USERNAME}
spring.rabbitmq.password=${RABBITMQ_PASSWORD}

# Logging Configuration
logging.level.root=INFO
logging.level.com.example.chart=DEBUG
logging.level.org.springframework.kafka=INFO
logging.level.org.springframework.mail=DEBUG

# Kafka Topics and Consumer Configuration
spring.kafka.topic.email=email-topic
spring.kafka.consumer.group-id=email-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.chart.email.model
spring.kafka.consumer.properties.fetch.min.bytes=1
spring.kafka.consumer.properties.fetch.max.wait.ms=500
spring.kafka.consumer.properties.max.poll.interval.ms=300000
spring.kafka.consumer.properties.session.timeout.ms=10000

# Retry Configuration
spring.kafka.retry.topic.suffix=.retry
spring.kafka.retry.topic.attempts=3
spring.kafka.retry.topic.initial-interval=1000
spring.kafka.retry.topic.multiplier=2.0
spring.kafka.retry.topic.max-interval=10000